{"version":3,"sources":["components/ChannelItem.tsx","components/ChannelList.tsx","App.tsx","modules/Counter.tsx","serviceWorker.ts","index.tsx"],"names":["styled","button","Thumbnail","img","ChannelDetail","div","Title","Details","ChannelItemStyle","ChannelItem","props","channel","videoElementId","streamId","thumnbailElementId","flvPlayer","hiddenPlayer","onClick","document","getElementById","hidden","videoElement","url","tip","flvjs","createPlayer","type","isLive","attachMediaElement","load","play","onSelectChannel","id","src","controls","width","height","text","details","html","escapeEl","createElement","innerHTML","textContent","unescapeHTML","replace","genre","length","channelDetail","name","ChannelStyle","ChannelList","useState","channels","setChannels","useEffect","a","fetch","credentials","res","lines","split","map","line","elements","contactUrl","listenerCount","relayCount","bitrate","fetchData","filter","item","index","key","CounterActionType","Logo","App","initialState","count","counterReducer","state","action","ADD","amount","DECREMENT","INCREMENT","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5931e9e4.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport Channel from '../Channel';\n\ndeclare var flvjs: any;\n\ntype Props = {\n    channel: Channel,\n}\n\nconst ChannelItem = (props: Props) => {\n    const {\n        channel,\n    } = props;\n\n    function unescapeHTML(html: string) {\n      var escapeEl = document.createElement('textarea');\n      escapeEl.innerHTML = html;\n      return escapeEl.textContent;\n    }\n\n    const channelDetail = (channel: Channel) => {\n        let text = '';\n        const details = unescapeHTML(channel.details.replace(/ - .*/, '')) || ''\n\n        if (channel.genre.length) {\n            text = channel.genre\n            if (details.length) {\n                text += ' - '\n            }\n        }\n        if (details.length) {\n            text += details\n        }\n        return text;\n    }\n\n    const videoElementId = `videoElement-${channel.streamId}`;\n    const thumnbailElementId = `thumnbailElement-${channel.streamId}`;\n    let flvPlayer: any = null;\n    let hiddenPlayer = true;\n    const onSelectChannel = () => {\n        if (!flvPlayer) {\n            let thumnbailElement:any = document.getElementById(thumnbailElementId);\n            thumnbailElement.hidden = true;\n\n            let videoElement:any = document.getElementById(videoElementId);\n            videoElement.hidden = false;\n            const url = `http://peca.live:7144/stream/${channel.streamId}.flv?auth=JkVYNUxQTmVaTUEwWSdlMDouSWhDQnE7c1lZKCFyeXVY&tip=${channel.tip}`;\n            flvPlayer = flvjs.createPlayer({\n                type: 'flv',\n                isLive: true,\n                url: url\n            });\n            flvPlayer.attachMediaElement(videoElement);\n            flvPlayer.load();\n            flvPlayer.play();\n            hiddenPlayer = false;\n        }\n    };\n\n    return (\n        <ChannelItemStyle onClick={() => onSelectChannel()}>\n            <a>\n                <div>\n                    <Thumbnail id={thumnbailElementId} src=\"./live-chuu.png\" hidden={!hiddenPlayer} />\n                    <video id={videoElementId} controls width=\"347.5\" height=\"195.47\" hidden={hiddenPlayer}></video>\n                </div>\n                <ChannelDetail>\n                    <Title>\n                        {channelDetail(channel)}\n                    </Title>\n                    <Details>\n                        {channel.name}\n                    </Details>\n                </ChannelDetail>\n            </a>\n        </ChannelItemStyle>\n    );\n};\n\nconst StyledButton = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  color: palevioletred;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n`\n\nconst Thumbnail = styled.img`\n  width: 347.5px;\n  height: 195.47px;\n`\n\nconst ChannelDetail = styled.div`\n  padding: 0px 5px;\n`\n\nconst Title = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;  width: 347px;\n\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 16.8px;\n  color: rgb(25, 23, 28);\n  font-family:\"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  margin-top: 5px;\n  margin-bottom: 2px;\n`\n\nconst Details = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;  width: 347px;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 18px;\n  color: rgb(50, 47, 55);\n  font-family:\"Helvetica Neue\", Helvetica, Arial, sans-serif;\n`\n\nconst ChannelItemStyle = styled.div`\n  float: left;\n  padding: 10px;\n`\n\nexport default ChannelItem;\n","import * as React from 'react';\nimport ChannelItem from './ChannelItem'\nimport Channel from '../Channel'\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst ChannelList = () => {\n    const [channels, setChannels] = useState<Channel[]>([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            // const tp_res = await fetch('http://temp.orz.hm/yp/index.txt', {credentials: 'same-origin'});\n            // const tp_text = await tp_res.text();\n\n            // const sp_res = await fetch('http://bayonet.ddo.jp/sp/index.txt', {credentials: 'same-origin'});\n            // const sp_text = await sp_res.text();\n            // // const sp_text = \"\";\n\n            // const text = tp_text + '\\n' + sp_text;\n            // const lines = text.split('\\n');\n\n            const res = await fetch('https://peca-live.herokuapp.com/api/v1/channels', {credentials: 'same-origin'});\n            const text = await res.text();\n            const lines = text.split('\\n');\n\n            const channels: any = lines.map(line => {\n                const elements = line.split('<>');\n                const type = elements[9];\n                if (type === null) { return null; }\n\n                return {\n                    name: elements[0],          // A.ch\n                    streamId: elements[1],      // 0C1A6C6959CEB2A8BF9598BC9185FF32\n                    tip: elements[2],           // 14.13.42.64:5184\n                    contactUrl: elements[3],    // http://jbbs.shitaraba.net/bbs/read.cgi/game/52685/1567349533/\n                    genre: elements[4],         // PS4\n                    details: elements[5],       // モンスターハンターワールド：アイスボーン MHWIB - &lt;Open&gt;\n                    listenerCount: elements[6], // -1\n                    relayCount: elements[7],    // -1\n                    bitrate: elements[8],       // 1500\n                    type: type,                 // FLV\n                } }\n            );\n            setChannels(channels);\n\n            // const channel: any = {\n            //     name: 'kumakuma',\n            //     streamId: '0CBAC3B0C846C650EEC23F9A26562ACE',\n            //     tip: '',\n            //     contactUrl: 'http://jbbs.shitaraba.net/computer/39120/',\n            //     genre: 'tp?@PS4',\n            //     details: 'Assassin\\'sCreed Odyssey',\n            //     listenerCount: 99,\n            //     relayCount: 99,\n            //     bitrate: 1478,\n            //     type: 'FLV',\n            // }\n            // const channels: any = [channel];\n            // setChannels(channels);\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <ChannelStyle>\n            {\n                channels.filter(channel => channel.type === 'FLV').map((item, index) => {\n                    return <ChannelItem key={index} channel={item}/>\n                })\n            }\n        </ChannelStyle>\n    );\n};\n\nconst ChannelStyle = styled.div`\n  /* padding: 50px; */\n`\n\nexport default ChannelList;\n","// import React, { FC } from 'react';\n// import Counter from './containers/Counter';\n// import './App.css';\n\n// const App: FC = () => (\n//   <div className=\"container\">\n//     <header>\n//       <h1>ビーズカウンター</h1>\n//     </header>\n//     <Counter />\n//   </div>\n// );\n\n// export default App;\n\n// import React, { Component } from \"react\";\n// import { Button, Card, Statistic } from \"semantic-ui-react\";\n// import \"./App.css\";\n// interface AppState {\n//   count: number;\n// }\n// class App extends Component<{}, AppState> {\n//   constructor(props: {}) {\n//     super(props);\n//     this.state = { count: 0 };\n//   }\n//   increment() {\n//     this.setState(prevState => ({\n//       count: prevState.count + 1\n//     }));\n//   }\n//   decrement() {\n//     this.setState(prevState => ({\n//       count: prevState.count - 1\n//     }));\n//   }\n//   render() {\n//     const { count } = this.state;\n//     return (\n//       <div className=\"container\">\n//         <header>\n//           <h1>カ ウ ン タ ー </h1>\n//         </header>\n//         <Card>\n//           <Statistic className=\"number-board\">\n//             <Statistic.Label>count</Statistic.Label>\n//             <Statistic.Value>{count}</Statistic.Value>\n//           </Statistic>\n//           <Card.Content>\n//             <div className=\"ui two buttons\">\n//               <Button color=\"red\" onClick={() => this.decrement()}>\n//                 -1\n//               </Button>\n//               <Button color=\"green\" onClick={() => this.increment()}>\n//                 +1\n//               </Button>\n//             </div>\n//           </Card.Content>\n//         </Card>\n//       </div>\n//     );\n//   }\n// }\n// export default App;\n\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Header';\nimport ChannelList from './components/ChannelList';\nimport { BrowserRouter, Route, Link } from 'react-router-dom'\n\nimport Counter from './components/Counter';\n\n// // // type AppProps = {\n// // //   fuga: string,\n// // //   handleClick: () => void;\n// // // }\n\n// // // type Props = {\n// // //   // fuga: string,\n// // //   // handleClick: () => void;\n// // // }\n\n// // // const App = (props: Props) => {\n// // //   const {\n// // //     // fuga,\n// // //     // handleClick\n// // //   } = props;\n\n// // //   return (\n// // //     <div>\n// // //       {/* <span>{fuga}</span> */}\n// // //       {/* <button onClick={ () => handleClick() }>増加</button> */}\n// // //     </div>\n// // //   );\n// // // }\n\n// // // const App: FC<HeaderProps> = ({ name, children }) => {\n// // //   return (\n// // //     <div>\n// // //       <p>{name}さんこんにちは</p>\n// // //       <div>{children}</div>\n// // //     </div>\n// // //   )\n// // // }\n// // // export default class App extends React.Component {\n// // //   render() {\n// // //     return <div>\n// // //       <span>{this.props.fuga}</span>\n// // //       <button onClick={ () => this.props.handleClick() }>増加</button>\n// // //     </div>\n// // //   }\n// // // }\n\nimport styled from 'styled-components';\n\nconst ChannelStyle = styled.div`\n  padding: 40px;\n`\n\nconst Logo = styled.img`\n  height: 50px;\n  width: 180px;\n  padding-left: 7px;\n`\n\nconst App = () => (\n  // <Counter />\n  <ChannelStyle>\n    <Logo src=\"pecalive.png\" />\n    <ChannelList />\n  </ChannelStyle>\n  // <BrowserRouter>\n  //   <div>\n  //     <ul>\n  //       <li><Link to='/'>Home</Link></li>\n  //       <li><Link to='/about'>About</Link></li>\n  //       <li><Link to='/friends'>Friends</Link></li>\n  //     </ul>\n\n  //     <Route exact path='/' component={Home} />\n  //     <Route path='/about' component={About} />\n  //     <Route path='/friends' component={Friends} />\n  //     <Route path='/menus/:id' component={ChannelList} />\n  //   </div>\n  // </BrowserRouter>\n)\n\n// const App: React.FC = () => {\n//   return (\n//     <div className=\"App\">\n//       <Header />\n//       <ChannelList />\n\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <div>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </div>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","import { Reducer } from \"redux\";\n\nexport enum CounterActionType {\n  ADD = \"COUNTER/ADD\",\n  DECREMENT = \"COUNTER/DECREMENT\",\n  INCREMENT = \"COUNTER/INCREMENT\"\n}\nexport interface CounterAction {\n  type: CounterActionType;\n  amount?: number;\n}\nexport const add = (amount: number): CounterAction => ({\n  amount,\n  type: CounterActionType.ADD\n});\nexport const decrement = (): CounterAction => ({\n  type: CounterActionType.DECREMENT\n});\nexport const increment = (): CounterAction => ({\n  type: CounterActionType.INCREMENT\n});\n\n\nexport interface CounterState {\n  count: number;\n}\nexport const initialState: CounterState = { count: 0 };\nconst counterReducer: Reducer<CounterState, CounterAction> = (\n  state: CounterState = initialState,\n  action: CounterAction\n): CounterState => {\n  switch (action.type) {\n    case CounterActionType.ADD:\n      return {\n        ...state,\n        count: state.count + (action.amount || 0)\n      };\n    case CounterActionType.DECREMENT:\n      return {\n        ...state,\n        count: state.count - 1\n      };\n    case CounterActionType.INCREMENT:\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default: {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const _: never = action.type;\n      return state;\n    }\n  }\n};\nexport default counterReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport App from \"./App\";\n\nimport counterReducer, { initialState } from './modules/Counter'\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nconst store = createStore(counterReducer, initialState);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\nserviceWorker.unregister();\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// import { Provider } from 'react-redux'\n// import { createStore } from 'redux'\n\n// const initialState = {\n//     fuga: 1\n// }\n\n// export default function reducer(state = initialState, action: any) {\n//     switch(action.type) {\n//         case 'INCREMENT':\n//         default:\n//         return state\n//     }\n// }\n\n// const store = createStore(reducer)\n\n// ReactDOM.render(\n//     <Provider store={store}>\n//         <App />\n//     </Provider>,\n//     document.getElementById('root')\n// )\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}